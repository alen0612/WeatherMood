{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\weathermood\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport Mynavbar from \"./Components/Mynavbar\";\nimport Today from \"./Pages/Today\";\nimport Forecast from \"./Pages/Forecast\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Alert } from \"bootstrap\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIkey = \"029ab88b8a27d39ef20a062c38c4b411\";\n\nfunction App() {\n  _s();\n\n  let today; // record today's date\n\n  const dayList = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\n  const [location, setLocation] = useState(\"Taipei\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [temp, setTemp] = useState(0);\n  const [graph, setGraph] = useState(\"°C\");\n  const [weather, setWeather] = useState(\"Clear\"); //const [forecast, setForecast] = useState({});\n\n  const [forecastTemp, setForecastTemp] = useState({\n    0: 0,\n    1: 0,\n    2: 0,\n    3: 0\n  });\n  const [forecastWeather, setForecastWeather] = useState({\n    0: \"Clear\",\n    1: \"Clear\",\n    2: \"Clear\",\n    3: \"Clear\"\n  });\n  const [tomorrowLogo, setTomorrowLogo] = useState(\"url(/clearLogo.png)\");\n  const [logo, setLogo] = useState({\n    backgroundImage: \"url(/clearLogo.png)\"\n  });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clearSky.jpg)\"\n  });\n  useEffect(() => {\n    getLocation();\n    getDate();\n  }, []);\n\n  const getDate = () => {\n    var day = new Date();\n    today = day.getDay(); //console.log(today);\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(getLonandLat);else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    initialWeather(position.coords.longitude, position.coords.latitude);\n    initialForecast(position.coords.longitude, position.coords.latitude);\n  }\n\n  const initialWeather = (lon, lat) => {\n    // this will render initial page when user get in website for the first time\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon + \"&units=\" + unit + \"&appid=\" + APIkey).then(response => {\n      console.log(response.data); //console.log(response.data.weather[0].main);\n\n      setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n      setTemp(parseInt(response.data.main.temp));\n      setLocation(response.data.name);\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const initialForecast = (lon, lat) => {\n    Axios.get(\"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&units=\" + unit + \"&appid=\" + APIkey).then(response => {\n      setForecastTemp({\n        0: response.data.list[8].main.temp,\n        1: response.data.list[16].main.temp,\n        2: response.data.list[24].main.temp,\n        3: response.data.list[32].main.temp\n      });\n      checkForecastWeather([response.data.list[8].weather[0].id, response.data.list[16].weather[0].id, response.data.list[24].weather[0].id, response.data.list[32].weather[0].id]);\n    });\n  };\n\n  function checkForecastWeather(ID) {\n    setForecastWeather({\n      0: checkForecastID(ID[0]),\n      1: checkForecastID(ID[1]),\n      2: checkForecastID(ID[2]),\n      3: checkForecastID(ID[3])\n    });\n  }\n\n  function checkForecastID(ID) {\n    if (ID >= 200 && ID < 300) return \"ThunderStorm\";\n    if (ID >= 300 && ID < 600) return \"Rain\";\n    if (ID >= 600 && ID < 700) return \"Snow\";\n    if (ID >= 700 && ID < 800) return \"Mist\";else return \"Clear\";\n  }\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\" + location + \"&units=\" + unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n      setTemp(parseInt(response.data.main.temp));\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const checkWeather = weatherID => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setWeather(\"Thunderstorm\");\n      setBackground({\n        backgroundImage: \"url(/thunderstorm.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/thunderstormLogo.png)\"\n      });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setWeather(\"Rain\");\n      setBackground({\n        backgroundImage: \"url(/rain.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/rainLogo.png)\"\n      });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setWeather(\"Snow\");\n      setBackground({\n        backgroundImage: \"url(/snow.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/snowLogo.png)\"\n      });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setWeather(\"Mist\");\n      setBackground({\n        backgroundImage: \"url(/mist.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/mistLogo.png)\"\n      });\n    } else {\n      setWeather(\"Clear\");\n      setBackground({\n        backgroundImage: \"url(/clearSky.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/clearLogo.png)\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Mynavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/today\",\n          element: /*#__PURE__*/_jsxDEV(Today, {\n            background: background,\n            weather: weather,\n            temp: temp,\n            logo: logo,\n            unit: unit,\n            graph: graph,\n            location: location,\n            setLocation: setLocation,\n            setUnit: setUnit,\n            getWeather: getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/forecast\",\n          element: /*#__PURE__*/_jsxDEV(Forecast, {\n            today: today,\n            dayList: dayList,\n            unit: unit,\n            location: location,\n            background: background,\n            forecastTemp: forecastTemp,\n            forecastWeather: forecastWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"e+bAwFnhq4sZt0OQZvkVnCTaK5Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/User/Desktop/weathermood/src/App.js"],"names":["Mynavbar","Today","Forecast","ErrorPage","React","useEffect","useState","BrowserRouter","Router","Routes","Route","Alert","Axios","APIkey","App","today","dayList","location","setLocation","unit","setUnit","temp","setTemp","graph","setGraph","weather","setWeather","forecastTemp","setForecastTemp","forecastWeather","setForecastWeather","tomorrowLogo","setTomorrowLogo","logo","setLogo","backgroundImage","background","setBackground","getLocation","getDate","day","Date","getDay","navigator","geolocation","getCurrentPosition","getLonandLat","position","initialWeather","coords","longitude","latitude","initialForecast","lon","lat","get","then","response","console","log","data","parseInt","main","name","checkWeather","id","catch","error","alert","list","checkForecastWeather","ID","checkForecastID","getWeather","weatherID"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Mynavbar from \"./Components/Mynavbar\";\nimport Today from \"./Pages/Today\";\nimport Forecast from \"./Pages/Forecast\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Alert } from \"bootstrap\";\nimport Axios from \"axios\";\n\nconst APIkey = \"029ab88b8a27d39ef20a062c38c4b411\";\n\nfunction App() {\n  let today; // record today's date\n  const dayList = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\n\n  const [location, setLocation] = useState(\"Taipei\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [temp, setTemp] = useState(0);\n  const [graph, setGraph] = useState(\"°C\");\n  const [weather, setWeather] = useState(\"Clear\");\n  //const [forecast, setForecast] = useState({});\n  const [forecastTemp, setForecastTemp] = useState({ 0: 0, 1: 0, 2: 0, 3: 0 });\n  const [forecastWeather, setForecastWeather] = useState({\n    0: \"Clear\",\n    1: \"Clear\",\n    2: \"Clear\",\n    3: \"Clear\",\n  });\n  const [tomorrowLogo, setTomorrowLogo] = useState(\"url(/clearLogo.png)\");\n  const [logo, setLogo] = useState({ backgroundImage: \"url(/clearLogo.png)\" });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clearSky.jpg)\",\n  });\n\n  useEffect(() => {\n    getLocation();\n    getDate();\n  }, []);\n\n  const getDate = () => {\n    var day = new Date();\n    today = day.getDay();\n    //console.log(today);\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(getLonandLat);\n    else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    initialWeather(position.coords.longitude, position.coords.latitude);\n    initialForecast(position.coords.longitude, position.coords.latitude);\n  }\n\n  const initialWeather = (lon, lat) => {\n    // this will render initial page when user get in website for the first time\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n        lat +\n        \"&lon=\" +\n        lon +\n        \"&units=\" +\n        unit +\n        \"&appid=\" +\n        APIkey\n    )\n      .then((response) => {\n        console.log(response.data);\n        //console.log(response.data.weather[0].main);\n        setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n        setTemp(parseInt(response.data.main.temp));\n        setLocation(response.data.name);\n        checkWeather(response.data.weather[0].id);\n      })\n      .catch((error) => {\n        alert(\"City Not Found!\");\n      });\n  };\n\n  const initialForecast = (lon, lat) => {\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/forecast?lat=\" +\n        lat +\n        \"&lon=\" +\n        lon +\n        \"&units=\" +\n        unit +\n        \"&appid=\" +\n        APIkey\n    ).then((response) => {\n      setForecastTemp({\n        0: response.data.list[8].main.temp,\n        1: response.data.list[16].main.temp,\n        2: response.data.list[24].main.temp,\n        3: response.data.list[32].main.temp,\n      });\n      checkForecastWeather([\n        response.data.list[8].weather[0].id,\n        response.data.list[16].weather[0].id,\n        response.data.list[24].weather[0].id,\n        response.data.list[32].weather[0].id,\n      ]);\n    });\n  };\n\n  function checkForecastWeather(ID) {\n    setForecastWeather({\n      0: checkForecastID(ID[0]),\n      1: checkForecastID(ID[1]),\n      2: checkForecastID(ID[2]),\n      3: checkForecastID(ID[3]),\n    });\n  }\n\n  function checkForecastID(ID) {\n    if (ID >= 200 && ID < 300) return \"ThunderStorm\";\n    if (ID >= 300 && ID < 600) return \"Rain\";\n    if (ID >= 600 && ID < 700) return \"Snow\";\n    if (ID >= 700 && ID < 800) return \"Mist\";\n    else return \"Clear\";\n  }\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n        location +\n        \"&units=\" +\n        unit +\n        \"&appid=\" +\n        APIkey\n    )\n      .then((response) => {\n        //console.log(response.data);\n        //console.log(response.data.weather[0].main);\n        setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n        setTemp(parseInt(response.data.main.temp));\n        checkWeather(response.data.weather[0].id);\n      })\n      .catch((error) => {\n        alert(\"City Not Found!\");\n      });\n  };\n\n  const checkWeather = (weatherID) => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setWeather(\"Thunderstorm\");\n      setBackground({ backgroundImage: \"url(/thunderstorm.jpg)\" });\n      setLogo({ backgroundImage: \"url(/thunderstormLogo.png)\" });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setWeather(\"Rain\");\n      setBackground({ backgroundImage: \"url(/rain.jpg)\" });\n      setLogo({ backgroundImage: \"url(/rainLogo.png)\" });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setWeather(\"Snow\");\n      setBackground({ backgroundImage: \"url(/snow.jpg)\" });\n      setLogo({ backgroundImage: \"url(/snowLogo.png)\" });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setWeather(\"Mist\");\n      setBackground({ backgroundImage: \"url(/mist.jpg)\" });\n      setLogo({ backgroundImage: \"url(/mistLogo.png)\" });\n    } else {\n      setWeather(\"Clear\");\n      setBackground({ backgroundImage: \"url(/clearSky.jpg)\" });\n      setLogo({ backgroundImage: \"url(/clearLogo.png)\" });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Mynavbar />\n        <Routes>\n          <Route\n            path=\"/today\"\n            element={\n              <Today\n                background={background}\n                weather={weather}\n                temp={temp}\n                logo={logo}\n                unit={unit}\n                graph={graph}\n                location={location}\n                setLocation={setLocation}\n                setUnit={setUnit}\n                getWeather={getWeather}\n              />\n            }\n          />\n          <Route\n            path=\"/forecast\"\n            element={\n              <Forecast\n                today={today}\n                dayList={dayList}\n                unit={unit}\n                location={location}\n                background={background}\n                forecastTemp={forecastTemp}\n                forecastWeather={forecastWeather}\n              />\n            }\n          />\n          <Route path=\"*\" element={<ErrorPage />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}