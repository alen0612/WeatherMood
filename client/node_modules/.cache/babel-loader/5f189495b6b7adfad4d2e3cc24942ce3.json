{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\weathermood\\\\client\\\\src\\\\Components\\\\PostBar.js\",\n    _s = $RefreshSig$();\n\nimport \"../App.css\";\nimport WeatherMood from \"./WeatherMood\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBoltLightning, faCloud, faQuestionCircle, faSmog, faSnowflake, faSun, faTint } from \"@fortawesome/free-solid-svg-icons\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PostBar(props) {\n  _s();\n\n  let today;\n  const [mood, setMood] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [id, setID] = useState(0);\n  const [moodList, setMoodList] = useState([]);\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/posts\").then(response => {\n      //console.log(response.data);\n      setMoodList(response.data); //console.log(moodList);\n    });\n  }, []);\n\n  const handleSelect = event => {\n    setMood(event.value);\n  };\n\n  const postMood = () => {\n    if (content === \"\" || mood === \"Mood\" || mood === \"\") return;\n    today = new Date();\n    axios.post(\"http://localhost:3001/posts\", {\n      content: content,\n      mood: mood,\n      year: today.getFullYear(),\n      month: today.getMonth() + 1,\n      day: today.getDate(),\n      hour: today.getHours(),\n      minute: today.getMinutes()\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        alert(\"Loggin to post!\");\n      } else {\n        setMoodList([...moodList, {\n          content: content,\n          mood: mood,\n          id: id,\n          year: today.getFullYear(),\n          month: today.getMonth() + 1,\n          day: today.getDate(),\n          hour: today.getHours(),\n          minute: today.getMinutes(),\n          username: response.data.username\n        }]);\n        setContent(\"\");\n        setMood(\"\");\n        setID(id + 1);\n      }\n    });\n  };\n\n  const deletePost = ID => {\n    axios.delete(`http://localhost:3001/posts/${ID}`).then(() => {\n      console.log(\"remove the post\");\n      const newList = moodList;\n      const updateList = newList.filter(item => item.id !== ID);\n      setMoodList(updateList);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostBar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PostBarInput\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"PostBarMood\",\n        defaultValue: \"DEFAULT\",\n        onChange: handleSelect,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          value: \"DEFAULT\",\n          hidden: true,\n          className: \"moodSelectDefault\",\n          children: \"Mood\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Clear\",\n          className: \"moodSelector\",\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Cloud\",\n          className: \"moodSelector\",\n          children: \"Cloud\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Thunder\",\n          className: \"moodSelector\",\n          children: \"Thunder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Rain\",\n          className: \"moodSelector\",\n          children: \"Rain\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Mist\",\n          className: \"moodSelector\",\n          children: \"Mist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Snow\",\n          className: \"moodSelector\",\n          children: \"Snow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"PostBarContent\",\n        placeholder: \"What's on your mind?\",\n        value: content,\n        onChange: event => {\n          setContent(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"PostBarButton\",\n        onClick: postMood,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PostBarSpace\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PostBarOutput\",\n      children: moodList.map((moodList, index) => {\n        return /*#__PURE__*/_jsxDEV(WeatherMood, {\n          username: moodList.username,\n          currentUser: props.currentUser,\n          content: moodList.content,\n          mood: moodList.mood,\n          id: moodList.id,\n          year: moodList.year,\n          month: moodList.month,\n          day: moodList.day,\n          hour: moodList.hour,\n          minute: moodList.minute,\n          deletePost: deletePost\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostBar, \"Z5SNeLtEEsRAit9o1A9Bs5RwFdI=\");\n\n_c = PostBar;\nexport default PostBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostBar\");","map":{"version":3,"sources":["C:/Users/User/Desktop/weathermood/client/src/Components/PostBar.js"],"names":["WeatherMood","React","Fragment","useState","useEffect","axios","FontAwesomeIcon","faBoltLightning","faCloud","faQuestionCircle","faSmog","faSnowflake","faSun","faTint","Select","PostBar","props","today","mood","setMood","content","setContent","id","setID","moodList","setMoodList","get","then","response","data","handleSelect","event","value","postMood","Date","post","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","headers","accessToken","localStorage","getItem","error","alert","username","deletePost","ID","delete","console","log","newList","updateList","filter","item","target","map","index","currentUser"],"mappings":"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","sourcesContent":["import \"../App.css\";\r\nimport WeatherMood from \"./WeatherMood\";\r\nimport React, { Fragment, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faBoltLightning,\r\n  faCloud,\r\n  faQuestionCircle,\r\n  faSmog,\r\n  faSnowflake,\r\n  faSun,\r\n  faTint,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Select from \"react-select\";\r\n\r\nfunction PostBar(props) {\r\n  let today;\r\n\r\n  const [mood, setMood] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [id, setID] = useState(0);\r\n  const [moodList, setMoodList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:3001/posts\").then((response) => {\r\n      //console.log(response.data);\r\n      setMoodList(response.data);\r\n      //console.log(moodList);\r\n    });\r\n  }, []);\r\n\r\n  const handleSelect = (event) => {\r\n    setMood(event.value);\r\n  };\r\n\r\n  const postMood = () => {\r\n    if (content === \"\" || mood === \"Mood\" || mood === \"\") return;\r\n    today = new Date();\r\n\r\n    axios\r\n      .post(\r\n        \"http://localhost:3001/posts\",\r\n        {\r\n          content: content,\r\n          mood: mood,\r\n          year: today.getFullYear(),\r\n          month: today.getMonth() + 1,\r\n          day: today.getDate(),\r\n          hour: today.getHours(),\r\n          minute: today.getMinutes(),\r\n        },\r\n        {\r\n          headers: {\r\n            accessToken: localStorage.getItem(\"accessToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.error) {\r\n          alert(\"Loggin to post!\");\r\n        } else {\r\n          setMoodList([\r\n            ...moodList,\r\n            {\r\n              content: content,\r\n              mood: mood,\r\n              id: id,\r\n              year: today.getFullYear(),\r\n              month: today.getMonth() + 1,\r\n              day: today.getDate(),\r\n              hour: today.getHours(),\r\n              minute: today.getMinutes(),\r\n              username: response.data.username,\r\n            },\r\n          ]);\r\n\r\n          setContent(\"\");\r\n          setMood(\"\");\r\n          setID(id + 1);\r\n        }\r\n      });\r\n  };\r\n\r\n  const deletePost = (ID) => {\r\n    axios.delete(`http://localhost:3001/posts/${ID}`).then(() => {\r\n      console.log(\"remove the post\");\r\n      const newList = moodList;\r\n      const updateList = newList.filter((item) => item.id !== ID);\r\n\r\n      setMoodList(updateList);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"PostBar\">\r\n      <div className=\"PostBarInput\">\r\n        {/*<Select\r\n          placeholder={defaultMood.label}\r\n          options={options}\r\n          className=\"PostBarMood\"\r\n          isSearchable={false}\r\n          onChange={handleSelect}\r\n        />*/}\r\n        <select\r\n          className=\"PostBarMood\"\r\n          defaultValue={\"DEFAULT\"}\r\n          onChange={handleSelect}\r\n        >\r\n          <option disabled value=\"DEFAULT\" hidden className=\"moodSelectDefault\">\r\n            Mood\r\n          </option>\r\n          <option value=\"Clear\" className=\"moodSelector\">\r\n            Clear\r\n          </option>\r\n          <option value=\"Cloud\" className=\"moodSelector\">\r\n            Cloud\r\n          </option>\r\n          <option value=\"Thunder\" className=\"moodSelector\">\r\n            Thunder\r\n          </option>\r\n          <option value=\"Rain\" className=\"moodSelector\">\r\n            Rain\r\n          </option>\r\n          <option value=\"Mist\" className=\"moodSelector\">\r\n            Mist\r\n          </option>\r\n          <option value=\"Snow\" className=\"moodSelector\">\r\n            Snow\r\n          </option>\r\n        </select>\r\n        <textarea\r\n          className=\"PostBarContent\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={content}\r\n          onChange={(event) => {\r\n            setContent(event.target.value);\r\n          }}\r\n        ></textarea>\r\n        <button className=\"PostBarButton\" onClick={postMood}>\r\n          Post\r\n        </button>\r\n      </div>\r\n      <div className=\"PostBarSpace\"></div>\r\n      <div className=\"PostBarOutput\">\r\n        {moodList.map((moodList, index) => {\r\n          return (\r\n            <WeatherMood\r\n              username={moodList.username}\r\n              currentUser={props.currentUser}\r\n              content={moodList.content}\r\n              mood={moodList.mood}\r\n              id={moodList.id}\r\n              year={moodList.year}\r\n              month={moodList.month}\r\n              day={moodList.day}\r\n              hour={moodList.hour}\r\n              minute={moodList.minute}\r\n              key={index}\r\n              deletePost={deletePost}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostBar;\r\n"]},"metadata":{},"sourceType":"module"}