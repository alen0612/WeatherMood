{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\weathermood\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport Mynavbar from \"./Components/Mynavbar\";\nimport Today from \"./Pages/Today\";\nimport Forecast from \"./Pages/Forecast\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Alert } from \"bootstrap\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIkey = \"029ab88b8a27d39ef20a062c38c4b411\";\n\nfunction App() {\n  _s();\n\n  const [date, setDate] = useState(0);\n  const dayList = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\n  const [todayWeather, setTodayWeather] = useState({\n    location: \"Taipei\",\n    unit: \"metric\",\n    temp: 0,\n    graph: \"°C\",\n    weather: \"Clear\"\n  });\n  const [forecast, setForecast] = useState({\n    0: {\n      id: 0,\n      weather: \"Clear\",\n      temp: 0,\n      logo: \"url(/clearLogo.png)\",\n      icon: \"url(/clearIcon.png)\"\n    },\n    1: {\n      id: 0,\n      weather: \"Clear\",\n      temp: 0,\n      logo: \"url(/clearLogo.png)\",\n      icon: \"url(/clearIcon.png)\"\n    },\n    2: {\n      id: 0,\n      weather: \"Clear\",\n      temp: 0,\n      logo: \"url(/clearLogo.png)\",\n      icon: \"url(/clearIcon.png)\"\n    },\n    3: {\n      id: 0,\n      weather: \"Clear\",\n      temp: 0,\n      logo: \"url(/clearLogo.png)\",\n      icon: \"url(/clearIcon.png)\"\n    }\n  });\n  const [logo, setLogo] = useState({\n    backgroundImage: \"url(/clearLogo.png)\"\n  });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clear.jpg)\"\n  });\n  const [forecastLogo, setForecastLogo] = useState({\n    backgroundImage: \"url(/clearLogo.png)\"\n  });\n  useEffect(() => {\n    getLocation();\n    getDate();\n  }, []);\n\n  const getDate = () => {\n    var day = new Date();\n    setDate(day.getDay());\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(getLonandLat);else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    initialWeather(position.coords.longitude, position.coords.latitude);\n    initialForecast(position.coords.longitude, position.coords.latitude);\n  }\n\n  const initialWeather = (lon, lat) => {\n    // this will render initial page when user get in website for the first time\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon + \"&units=\" + todayWeather.unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setTodayWeather(prevState => ({ ...prevState,\n        graph: todayWeather.unit === \"metric\" ? \"°C\" : \"°F\",\n        temp: parseInt(response.data.main.temp),\n        location: response.data.name\n      }));\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const initialForecast = (lon, lat) => {\n    Axios.get(\"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&units=\" + todayWeather.unit + \"&appid=\" + APIkey).then(response => {\n      setForecast(prevState => ({ ...prevState,\n        0: {\n          temp: response.data.list[8].main.temp\n        },\n        1: {\n          temp: response.data.list[16].main.temp\n        },\n        2: {\n          temp: response.data.list[24].main.temp\n        },\n        3: {\n          temp: response.data.list[32].main.temp\n        }\n      }));\n      checkForecastWeather([response.data.list[8].weather[0].id, response.data.list[16].weather[0].id, response.data.list[24].weather[0].id, response.data.list[32].weather[0].id]);\n    });\n  };\n\n  function checkForecastWeather(ID) {\n    setForecast(prevState => ({ ...prevState,\n      0: {\n        id: ID[0],\n        weather: setForecastPic(ID[0])\n      },\n      1: {\n        id: ID[1],\n        weather: setForecastPic(ID[1])\n      },\n      2: {\n        id: ID[2],\n        weather: setForecastPic(ID[2])\n      },\n      3: {\n        id: ID[3],\n        weather: setForecastPic(ID[3])\n      }\n    }));\n  }\n\n  function setForecastPic(ID) {\n    if (ID >= 200 && ID < 300) {\n      setForecast(prevState => ({ ...prevState,\n        logo: \"url(/thunderstormLogo.png)\",\n        icon: \"url(/thunderstormIcon.png)\"\n      }));\n      setForecastLogo({\n        backgroundImage: \"url(/thunderstormLogo.png)\"\n      });\n      return \"Tunderstorm\";\n    } else if (ID >= 300 && ID < 600) {\n      setForecast(prevState => ({ ...prevState,\n        logo: \"url(/rainLogo.png)\",\n        icon: \"url(/rainIcon.png)\"\n      }));\n      setForecastLogo({\n        backgroundImage: \"url(/rainLogo.png)\"\n      });\n      return \"Rain\";\n    } else if (ID >= 600 && ID < 700) {\n      setForecast(prevState => ({ ...prevState,\n        logo: \"url(/snowLogo.png)\",\n        icon: \"url(/snowIcon.png)\"\n      }));\n      setForecastLogo({\n        backgroundImage: \"url(/snowLogo.png)\"\n      });\n      return \"Snow\";\n    } else if (ID >= 700 && ID < 800) {\n      setForecast(prevState => ({ ...prevState,\n        logo: \"url(/mistLogo.png)\",\n        icon: \"url(/mistIcon.png)\"\n      }));\n      setForecastLogo({\n        backgroundImage: \"url(/mistLogo.png)\"\n      });\n      return \"Mist\";\n    } else if (ID === 800) {\n      setForecast(prevState => ({ ...prevState,\n        logo: \"url(/clearLogo.png)\",\n        icon: \"url(/clearIcon.png)\"\n      }));\n      setForecastLogo({\n        backgroundImage: \"url(/clearLogo.png)\"\n      });\n      return \"Clear\";\n    } else {\n      setForecast(prevState => ({ ...prevState,\n        logo: \"url(/cloudLogo.png)\",\n        icon: \"url(/cloudIcon.png)\"\n      }));\n      setForecastLogo({\n        backgroundImage: \"url(/cloudLogo.png)\"\n      });\n      return \"Clouds\";\n    }\n  }\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\" + todayWeather.location + \"&units=\" + todayWeather.unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setTodayWeather(prevState => ({ ...prevState,\n        graph: todayWeather.unit === \"metric\" ? \"°C\" : \"°F\",\n        temp: parseInt(response.data.main.temp)\n      }));\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const checkWeather = weatherID => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Thunderstorm\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/thunderstorm.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/thunderstormLogo.png)\"\n      });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Rain\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/rain.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/rainLogo.png)\"\n      });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Snow\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/snow.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/snowLogo.png)\"\n      });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Mist\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/mist.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/mistLogo.png)\"\n      });\n    } else if (weatherID === 800) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Clear\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/clear.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/clearLogo.png)\"\n      });\n    } else {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Clouds\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/cloud.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/cloudLogo.png)\"\n      });\n    }\n  };\n\n  function setLocation(data) {\n    setTodayWeather(prevState => ({ ...prevState,\n      location: data\n    }));\n  }\n\n  function setUnit(data) {\n    setTodayWeather(prevState => ({ ...prevState,\n      unit: data\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Mynavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/today\",\n          element: /*#__PURE__*/_jsxDEV(Today, {\n            background: background,\n            logo: logo,\n            todayWeather: todayWeather,\n            getWeather: getWeather,\n            setTodayWeather: setTodayWeather,\n            setLocation: setLocation,\n            setUnit: setUnit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/forecast\",\n          element: /*#__PURE__*/_jsxDEV(Forecast, {\n            todayWeather: todayWeather,\n            date: date,\n            dayList: dayList,\n            background: background,\n            forecast: forecast\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/lvEeiSG8mH7C8glYmsHXa1pzTQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/User/Desktop/weathermood/src/App.js"],"names":["Mynavbar","Today","Forecast","ErrorPage","React","useEffect","useState","BrowserRouter","Router","Routes","Route","Alert","Axios","APIkey","App","date","setDate","dayList","todayWeather","setTodayWeather","location","unit","temp","graph","weather","forecast","setForecast","id","logo","icon","setLogo","backgroundImage","background","setBackground","forecastLogo","setForecastLogo","getLocation","getDate","day","Date","getDay","navigator","geolocation","getCurrentPosition","getLonandLat","position","initialWeather","coords","longitude","latitude","initialForecast","lon","lat","get","then","response","prevState","parseInt","data","main","name","checkWeather","catch","error","alert","list","checkForecastWeather","ID","setForecastPic","getWeather","weatherID","setLocation","setUnit"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Mynavbar from \"./Components/Mynavbar\";\nimport Today from \"./Pages/Today\";\nimport Forecast from \"./Pages/Forecast\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Alert } from \"bootstrap\";\nimport Axios from \"axios\";\n\nconst APIkey = \"029ab88b8a27d39ef20a062c38c4b411\";\n\nfunction App() {\n  const [date, setDate] = useState(0);\n  const dayList = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\n\n  const [todayWeather, setTodayWeather] = useState({\n    location: \"Taipei\",\n    unit: \"metric\",\n    temp: 0,\n    graph: \"°C\",\n    weather: \"Clear\",\n  });\n  const [forecast, setForecast] = useState({\n    0: {\n      id: 0,\n      weather: \"Clear\",\n      temp: 0,\n      logo: \"url(/clearLogo.png)\",\n      icon: \"url(/clearIcon.png)\",\n    },\n    1: {\n      id: 0,\n      weather: \"Clear\",\n      temp: 0,\n      logo: \"url(/clearLogo.png)\",\n      icon: \"url(/clearIcon.png)\",\n    },\n    2: {\n      id: 0,\n      weather: \"Clear\",\n      temp: 0,\n      logo: \"url(/clearLogo.png)\",\n      icon: \"url(/clearIcon.png)\",\n    },\n    3: {\n      id: 0,\n      weather: \"Clear\",\n      temp: 0,\n      logo: \"url(/clearLogo.png)\",\n      icon: \"url(/clearIcon.png)\",\n    },\n  });\n  const [logo, setLogo] = useState({ backgroundImage: \"url(/clearLogo.png)\" });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clear.jpg)\",\n  });\n\n  const [forecastLogo, setForecastLogo] = useState({\n    backgroundImage: \"url(/clearLogo.png)\",\n  });\n\n  useEffect(() => {\n    getLocation();\n    getDate();\n  }, []);\n\n  const getDate = () => {\n    var day = new Date();\n    setDate(day.getDay());\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(getLonandLat);\n    else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    initialWeather(position.coords.longitude, position.coords.latitude);\n    initialForecast(position.coords.longitude, position.coords.latitude);\n  }\n\n  const initialWeather = (lon, lat) => {\n    // this will render initial page when user get in website for the first time\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n        lat +\n        \"&lon=\" +\n        lon +\n        \"&units=\" +\n        todayWeather.unit +\n        \"&appid=\" +\n        APIkey\n    )\n      .then((response) => {\n        //console.log(response.data);\n        //console.log(response.data.weather[0].main);\n        setTodayWeather((prevState) => ({\n          ...prevState,\n          graph: todayWeather.unit === \"metric\" ? \"°C\" : \"°F\",\n          temp: parseInt(response.data.main.temp),\n          location: response.data.name,\n        }));\n        checkWeather(response.data.weather[0].id);\n      })\n      .catch((error) => {\n        alert(\"City Not Found!\");\n      });\n  };\n\n  const initialForecast = (lon, lat) => {\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/forecast?lat=\" +\n        lat +\n        \"&lon=\" +\n        lon +\n        \"&units=\" +\n        todayWeather.unit +\n        \"&appid=\" +\n        APIkey\n    ).then((response) => {\n      setForecast((prevState) => ({\n        ...prevState,\n        0: { temp: response.data.list[8].main.temp },\n        1: { temp: response.data.list[16].main.temp },\n        2: { temp: response.data.list[24].main.temp },\n        3: { temp: response.data.list[32].main.temp },\n      }));\n      checkForecastWeather([\n        response.data.list[8].weather[0].id,\n        response.data.list[16].weather[0].id,\n        response.data.list[24].weather[0].id,\n        response.data.list[32].weather[0].id,\n      ]);\n    });\n  };\n\n  function checkForecastWeather(ID) {\n    setForecast((prevState) => ({\n      ...prevState,\n      0: { id: ID[0], weather: setForecastPic(ID[0]) },\n      1: { id: ID[1], weather: setForecastPic(ID[1]) },\n      2: { id: ID[2], weather: setForecastPic(ID[2]) },\n      3: { id: ID[3], weather: setForecastPic(ID[3]) },\n    }));\n  }\n\n  function setForecastPic(ID) {\n    if (ID >= 200 && ID < 300) {\n      setForecast((prevState) => ({\n        ...prevState,\n        logo: \"url(/thunderstormLogo.png)\",\n        icon: \"url(/thunderstormIcon.png)\",\n      }));\n      setForecastLogo({ backgroundImage: \"url(/thunderstormLogo.png)\" });\n      return \"Tunderstorm\";\n    } else if (ID >= 300 && ID < 600) {\n      setForecast((prevState) => ({\n        ...prevState,\n        logo: \"url(/rainLogo.png)\",\n        icon: \"url(/rainIcon.png)\",\n      }));\n      setForecastLogo({ backgroundImage: \"url(/rainLogo.png)\" });\n      return \"Rain\";\n    } else if (ID >= 600 && ID < 700) {\n      setForecast((prevState) => ({\n        ...prevState,\n        logo: \"url(/snowLogo.png)\",\n        icon: \"url(/snowIcon.png)\",\n      }));\n      setForecastLogo({ backgroundImage: \"url(/snowLogo.png)\" });\n      return \"Snow\";\n    } else if (ID >= 700 && ID < 800) {\n      setForecast((prevState) => ({\n        ...prevState,\n        logo: \"url(/mistLogo.png)\",\n        icon: \"url(/mistIcon.png)\",\n      }));\n      setForecastLogo({ backgroundImage: \"url(/mistLogo.png)\" });\n      return \"Mist\";\n    } else if (ID === 800) {\n      setForecast((prevState) => ({\n        ...prevState,\n        logo: \"url(/clearLogo.png)\",\n        icon: \"url(/clearIcon.png)\",\n      }));\n      setForecastLogo({ backgroundImage: \"url(/clearLogo.png)\" });\n      return \"Clear\";\n    } else {\n      setForecast((prevState) => ({\n        ...prevState,\n        logo: \"url(/cloudLogo.png)\",\n        icon: \"url(/cloudIcon.png)\",\n      }));\n      setForecastLogo({ backgroundImage: \"url(/cloudLogo.png)\" });\n      return \"Clouds\";\n    }\n  }\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n        todayWeather.location +\n        \"&units=\" +\n        todayWeather.unit +\n        \"&appid=\" +\n        APIkey\n    )\n      .then((response) => {\n        //console.log(response.data);\n        //console.log(response.data.weather[0].main);\n\n        setTodayWeather((prevState) => ({\n          ...prevState,\n          graph: todayWeather.unit === \"metric\" ? \"°C\" : \"°F\",\n          temp: parseInt(response.data.main.temp),\n        }));\n\n        checkWeather(response.data.weather[0].id);\n      })\n      .catch((error) => {\n        alert(\"City Not Found!\");\n      });\n  };\n\n  const checkWeather = (weatherID) => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Thunderstorm\",\n      }));\n      setBackground({ backgroundImage: \"url(/thunderstorm.jpg)\" });\n      setLogo({ backgroundImage: \"url(/thunderstormLogo.png)\" });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Rain\",\n      }));\n      setBackground({ backgroundImage: \"url(/rain.jpg)\" });\n      setLogo({ backgroundImage: \"url(/rainLogo.png)\" });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Snow\",\n      }));\n      setBackground({ backgroundImage: \"url(/snow.jpg)\" });\n      setLogo({ backgroundImage: \"url(/snowLogo.png)\" });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Mist\",\n      }));\n      setBackground({ backgroundImage: \"url(/mist.jpg)\" });\n      setLogo({ backgroundImage: \"url(/mistLogo.png)\" });\n    } else if (weatherID === 800) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Clear\",\n      }));\n      setBackground({ backgroundImage: \"url(/clear.jpg)\" });\n      setLogo({ backgroundImage: \"url(/clearLogo.png)\" });\n    } else {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Clouds\",\n      }));\n      setBackground({ backgroundImage: \"url(/cloud.jpg)\" });\n      setLogo({ backgroundImage: \"url(/cloudLogo.png)\" });\n    }\n  };\n\n  function setLocation(data) {\n    setTodayWeather((prevState) => ({\n      ...prevState,\n      location: data,\n    }));\n  }\n\n  function setUnit(data) {\n    setTodayWeather((prevState) => ({\n      ...prevState,\n      unit: data,\n    }));\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Mynavbar />\n        <Routes>\n          <Route\n            path=\"/today\"\n            element={\n              <Today\n                background={background}\n                logo={logo}\n                todayWeather={todayWeather}\n                getWeather={getWeather}\n                setTodayWeather={setTodayWeather}\n                setLocation={setLocation}\n                setUnit={setUnit}\n              />\n            }\n          />\n          <Route\n            path=\"/forecast\"\n            element={\n              <Forecast\n                todayWeather={todayWeather}\n                date={date}\n                dayList={dayList}\n                background={background}\n                forecast={forecast}\n              />\n            }\n          />\n          <Route path=\"*\" element={<ErrorPage />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}