{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\weathermood\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport Mynavbar from \"./Components/Mynavbar\";\nimport Today from \"./Pages/Today\";\nimport Forecast from \"./Pages/Forecast\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Alert } from \"bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [location, setLocation] = useState(\"Taipei\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [temp, setTemp] = useState(0);\n  const [graph, setGraph] = useState(\"°C\");\n  const [weather, setWeather] = useState(\"Clear\");\n  const [logo, setLogo] = useState({\n    backgroundImage: \"url(/clearLogo.png)\"\n  });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clearSky.jpg)\"\n  });\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const getLocation = () => {\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(getLonandLat);else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    initialWeather(position.coords.longitude, position.coords.latitude);\n  }\n\n  const initialWeather = (lon, lat) => {\n    // this will render initial page when user get in website for the first time\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon + \"&units=\" + unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n      setTemp(parseInt(response.data.main.temp));\n      setLocation(response.data.name);\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\" + location + \"&units=\" + unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n      setTemp(parseInt(response.data.main.temp));\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const checkWeather = weatherID => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setWeather(\"Thunderstorm\");\n      setBackground({\n        backgroundImage: \"url(/thunderstorm.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/thunderstormLogo.png)\"\n      });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setWeather(\"Rain\");\n      setBackground({\n        backgroundImage: \"url(/rain.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/rainLogo.png)\"\n      });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setWeather(\"Snow\");\n      setBackground({\n        backgroundImage: \"url(/snow.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/snowLogo.png)\"\n      });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setWeather(\"Mist\");\n      setBackground({\n        backgroundImage: \"url(/mist.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/mistLogo.png)\"\n      });\n    } else {\n      setWeather(\"Clear\");\n      setBackground({\n        backgroundImage: \"url(/clearSky.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/clearLogo.png)\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Mynavbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/today\",\n          element: /*#__PURE__*/_jsxDEV(Today, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/forecast\",\n          element: /*#__PURE__*/_jsxDEV(Forecast, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"d5GrgM8Egl2Wv0YmFuZMjZ+S4U8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/User/Desktop/weathermood/src/App.js"],"names":["Mynavbar","Today","Forecast","ErrorPage","React","useEffect","useState","BrowserRouter","Router","Routes","Route","Alert","App","location","setLocation","unit","setUnit","temp","setTemp","graph","setGraph","weather","setWeather","logo","setLogo","backgroundImage","background","setBackground","getLocation","navigator","geolocation","getCurrentPosition","getLonandLat","position","initialWeather","coords","longitude","latitude","lon","lat","Axios","get","APIkey","then","response","parseInt","data","main","name","checkWeather","id","catch","error","alert","getWeather","weatherID"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Mynavbar from \"./Components/Mynavbar\";\nimport Today from \"./Pages/Today\";\nimport Forecast from \"./Pages/Forecast\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Alert } from \"bootstrap\";\n\nfunction App() {\n  const [location, setLocation] = useState(\"Taipei\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [temp, setTemp] = useState(0);\n  const [graph, setGraph] = useState(\"°C\");\n  const [weather, setWeather] = useState(\"Clear\");\n  const [logo, setLogo] = useState({ backgroundImage: \"url(/clearLogo.png)\" });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clearSky.jpg)\",\n  });\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const getLocation = () => {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(getLonandLat);\n    else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    initialWeather(position.coords.longitude, position.coords.latitude);\n  }\n\n  const initialWeather = (lon, lat) => {\n    // this will render initial page when user get in website for the first time\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n        lat +\n        \"&lon=\" +\n        lon +\n        \"&units=\" +\n        unit +\n        \"&appid=\" +\n        APIkey\n    )\n      .then((response) => {\n        //console.log(response.data);\n        //console.log(response.data.weather[0].main);\n        setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n        setTemp(parseInt(response.data.main.temp));\n        setLocation(response.data.name);\n        checkWeather(response.data.weather[0].id);\n      })\n      .catch((error) => {\n        alert(\"City Not Found!\");\n      });\n  };\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n        location +\n        \"&units=\" +\n        unit +\n        \"&appid=\" +\n        APIkey\n    )\n      .then((response) => {\n        //console.log(response.data);\n        //console.log(response.data.weather[0].main);\n        setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n        setTemp(parseInt(response.data.main.temp));\n        checkWeather(response.data.weather[0].id);\n      })\n      .catch((error) => {\n        alert(\"City Not Found!\");\n      });\n  };\n\n  const checkWeather = (weatherID) => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setWeather(\"Thunderstorm\");\n      setBackground({ backgroundImage: \"url(/thunderstorm.jpg)\" });\n      setLogo({ backgroundImage: \"url(/thunderstormLogo.png)\" });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setWeather(\"Rain\");\n      setBackground({ backgroundImage: \"url(/rain.jpg)\" });\n      setLogo({ backgroundImage: \"url(/rainLogo.png)\" });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setWeather(\"Snow\");\n      setBackground({ backgroundImage: \"url(/snow.jpg)\" });\n      setLogo({ backgroundImage: \"url(/snowLogo.png)\" });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setWeather(\"Mist\");\n      setBackground({ backgroundImage: \"url(/mist.jpg)\" });\n      setLogo({ backgroundImage: \"url(/mistLogo.png)\" });\n    } else {\n      setWeather(\"Clear\");\n      setBackground({ backgroundImage: \"url(/clearSky.jpg)\" });\n      setLogo({ backgroundImage: \"url(/clearLogo.png)\" });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Mynavbar />\n        <Routes>\n          <Route path=\"/today\" element={<Today />} />\n          <Route path=\"/forecast\" element={<Forecast />} />\n          <Route path=\"*\" element={<ErrorPage />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}