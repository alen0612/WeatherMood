{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\weathermood\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport Mynavbar from \"./Components/Mynavbar\";\nimport Today from \"./Pages/Today\";\nimport Forecast from \"./Pages/Forecast\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Alert } from \"bootstrap\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIkey = \"029ab88b8a27d39ef20a062c38c4b411\";\n\nfunction App() {\n  _s();\n\n  console.log(showToday);\n  const [showToday, setShowToday] = useState(true);\n  const [date, setDate] = useState(0);\n  const dayList = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\n  const [todayWeather, setTodayWeather] = useState({\n    location: \"Taipei\",\n    unit: \"metric\",\n    temp: 0,\n    graph: \"°C\",\n    weather: \"Clear\"\n  });\n  const [forecast, setForecast] = useState({\n    temp: [0, 0, 0, 0],\n    weather: [\"Clear\", \"Clear\", \"Clear\", \"Clear\"],\n    id: [0, 0, 0, 0]\n  });\n  const [logo, setLogo] = useState({\n    backgroundImage: \"url(/clearLogo.png)\"\n  });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clear.jpg)\"\n  });\n  useEffect(() => {\n    getLocation();\n    getDate();\n  }, []);\n\n  const getDate = () => {\n    var day = new Date();\n    setDate(day.getDay());\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(getLonandLat);else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    initialWeather(position.coords.longitude, position.coords.latitude);\n    initialForecast(position.coords.longitude, position.coords.latitude);\n  }\n\n  const initialWeather = (lon, lat) => {\n    // this will render initial page when user get in website for the first time\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon + \"&units=\" + todayWeather.unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setTodayWeather(prevState => ({ ...prevState,\n        graph: todayWeather.unit === \"metric\" ? \"°C\" : \"°F\",\n        temp: parseInt(response.data.main.temp),\n        location: response.data.name\n      }));\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const initialForecast = (lon, lat) => {\n    Axios.get(\"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&units=\" + todayWeather.unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      setForecast(prevState => ({ ...prevState,\n        temp: [parseInt(response.data.list[8].main.temp), parseInt(response.data.list[16].main.temp), parseInt(response.data.list[24].main.temp), parseInt(response.data.list[32].main.temp)]\n      }));\n      checkForecastWeather([response.data.list[8].weather[0].id, response.data.list[16].weather[0].id, response.data.list[24].weather[0].id, response.data.list[32].weather[0].id]);\n    });\n  };\n\n  function checkForecastWeather(ID) {\n    //console.log(\"set forecast ID\");\n    setForecast(prevState => ({ ...prevState,\n      id: [ID[0], ID[1], ID[2], ID[3]],\n      weather: [setForecastIcon(ID[0]), setForecastIcon(ID[1]), setForecastIcon(ID[2]), setForecastIcon(ID[3])]\n    }));\n  }\n\n  function setForecastIcon(ID) {\n    //console.log(\"set forecast icon\");\n    if (ID >= 200 && ID < 300) return \"Tunderstorm\";else if (ID >= 300 && ID < 600) return \"Rain\";else if (ID >= 600 && ID < 700) return \"Snow\";else if (ID >= 700 && ID < 800) return \"Mist\";else if (ID === 800) return \"Clear\";else return \"Clouds\";\n  }\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\" + todayWeather.location + \"&units=\" + todayWeather.unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setTodayWeather(prevState => ({ ...prevState,\n        graph: todayWeather.unit === \"metric\" ? \"°C\" : \"°F\",\n        temp: parseInt(response.data.main.temp)\n      }));\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const getForecast = () => {\n    Axios.get(\"https://api.openweathermap.org/data/2.5/forecast?q=\" + todayWeather.location + \"&units=\" + todayWeather.unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      setForecast(prevState => ({ ...prevState,\n        temp: [parseInt(response.data.list[8].main.temp), parseInt(response.data.list[16].main.temp), parseInt(response.data.list[24].main.temp), parseInt(response.data.list[32].main.temp)]\n      }));\n      checkForecastWeather([response.data.list[8].weather[0].id, response.data.list[16].weather[0].id, response.data.list[24].weather[0].id, response.data.list[32].weather[0].id]);\n    });\n  };\n\n  const checkWeather = weatherID => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Thunderstorm\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/thunderstorm.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/thunderstormLogo.png)\"\n      });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Rain\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/rain.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/rainLogo.png)\"\n      });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Snow\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/snow.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/snowLogo.png)\"\n      });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Mist\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/mist.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/mistLogo.png)\"\n      });\n    } else if (weatherID === 800) {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Clear\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/clear.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/clearLogo.png)\"\n      });\n    } else {\n      setTodayWeather(prevState => ({ ...prevState,\n        weather: \"Clouds\"\n      }));\n      setBackground({\n        backgroundImage: \"url(/cloud.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/cloudLogo.png)\"\n      });\n    }\n  };\n\n  function setLocation(data) {\n    setTodayWeather(prevState => ({ ...prevState,\n      location: data\n    }));\n  }\n\n  function setUnit(data) {\n    setTodayWeather(prevState => ({ ...prevState,\n      unit: data\n    }));\n  }\n\n  return showToday === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Mynavbar, {\n      setShowToday: setShowToday\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Today, {\n        background: background,\n        logo: logo,\n        todayWeather: todayWeather,\n        getWeather: getWeather,\n        getForecast: getForecast,\n        setTodayWeather: setTodayWeather,\n        setLocation: setLocation,\n        setUnit: setUnit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Mynavbar, {\n      setShowToday: setShowToday\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Forecast, {\n        todayWeather: todayWeather,\n        date: date,\n        dayList: dayList,\n        forecast: forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"PDY2hukwHaTNwfzghKyUI6SdtjY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/User/Desktop/weathermood/src/App.js"],"names":["Mynavbar","Today","Forecast","ErrorPage","React","useEffect","useState","BrowserRouter","Router","Routes","Route","Alert","Axios","APIkey","App","console","log","showToday","setShowToday","date","setDate","dayList","todayWeather","setTodayWeather","location","unit","temp","graph","weather","forecast","setForecast","id","logo","setLogo","backgroundImage","background","setBackground","getLocation","getDate","day","Date","getDay","navigator","geolocation","getCurrentPosition","getLonandLat","position","initialWeather","coords","longitude","latitude","initialForecast","lon","lat","get","then","response","prevState","parseInt","data","main","name","checkWeather","catch","error","alert","list","checkForecastWeather","ID","setForecastIcon","getWeather","getForecast","weatherID","setLocation","setUnit"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Mynavbar from \"./Components/Mynavbar\";\nimport Today from \"./Pages/Today\";\nimport Forecast from \"./Pages/Forecast\";\nimport ErrorPage from \"./Pages/ErrorPage\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Alert } from \"bootstrap\";\nimport Axios from \"axios\";\n\nconst APIkey = \"029ab88b8a27d39ef20a062c38c4b411\";\n\nfunction App() {\n  console.log(showToday);\n\n  const [showToday, setShowToday] = useState(true);\n\n  const [date, setDate] = useState(0);\n  const dayList = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\n\n  const [todayWeather, setTodayWeather] = useState({\n    location: \"Taipei\",\n    unit: \"metric\",\n    temp: 0,\n    graph: \"°C\",\n    weather: \"Clear\",\n  });\n  const [forecast, setForecast] = useState({\n    temp: [0, 0, 0, 0],\n    weather: [\"Clear\", \"Clear\", \"Clear\", \"Clear\"],\n    id: [0, 0, 0, 0],\n  });\n  const [logo, setLogo] = useState({ backgroundImage: \"url(/clearLogo.png)\" });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clear.jpg)\",\n  });\n\n  useEffect(() => {\n    getLocation();\n    getDate();\n  }, []);\n\n  const getDate = () => {\n    var day = new Date();\n    setDate(day.getDay());\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(getLonandLat);\n    else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    initialWeather(position.coords.longitude, position.coords.latitude);\n    initialForecast(position.coords.longitude, position.coords.latitude);\n  }\n\n  const initialWeather = (lon, lat) => {\n    // this will render initial page when user get in website for the first time\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n        lat +\n        \"&lon=\" +\n        lon +\n        \"&units=\" +\n        todayWeather.unit +\n        \"&appid=\" +\n        APIkey\n    )\n      .then((response) => {\n        //console.log(response.data);\n        //console.log(response.data.weather[0].main);\n        setTodayWeather((prevState) => ({\n          ...prevState,\n          graph: todayWeather.unit === \"metric\" ? \"°C\" : \"°F\",\n          temp: parseInt(response.data.main.temp),\n          location: response.data.name,\n        }));\n        checkWeather(response.data.weather[0].id);\n      })\n      .catch((error) => {\n        alert(\"City Not Found!\");\n      });\n  };\n\n  const initialForecast = (lon, lat) => {\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/forecast?lat=\" +\n        lat +\n        \"&lon=\" +\n        lon +\n        \"&units=\" +\n        todayWeather.unit +\n        \"&appid=\" +\n        APIkey\n    ).then((response) => {\n      //console.log(response.data);\n      setForecast((prevState) => ({\n        ...prevState,\n        temp: [\n          parseInt(response.data.list[8].main.temp),\n          parseInt(response.data.list[16].main.temp),\n          parseInt(response.data.list[24].main.temp),\n          parseInt(response.data.list[32].main.temp),\n        ],\n      }));\n      checkForecastWeather([\n        response.data.list[8].weather[0].id,\n        response.data.list[16].weather[0].id,\n        response.data.list[24].weather[0].id,\n        response.data.list[32].weather[0].id,\n      ]);\n    });\n  };\n\n  function checkForecastWeather(ID) {\n    //console.log(\"set forecast ID\");\n    setForecast((prevState) => ({\n      ...prevState,\n      id: [ID[0], ID[1], ID[2], ID[3]],\n      weather: [\n        setForecastIcon(ID[0]),\n        setForecastIcon(ID[1]),\n        setForecastIcon(ID[2]),\n        setForecastIcon(ID[3]),\n      ],\n    }));\n  }\n\n  function setForecastIcon(ID) {\n    //console.log(\"set forecast icon\");\n    if (ID >= 200 && ID < 300) return \"Tunderstorm\";\n    else if (ID >= 300 && ID < 600) return \"Rain\";\n    else if (ID >= 600 && ID < 700) return \"Snow\";\n    else if (ID >= 700 && ID < 800) return \"Mist\";\n    else if (ID === 800) return \"Clear\";\n    else return \"Clouds\";\n  }\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n        todayWeather.location +\n        \"&units=\" +\n        todayWeather.unit +\n        \"&appid=\" +\n        APIkey\n    )\n      .then((response) => {\n        //console.log(response.data);\n        //console.log(response.data.weather[0].main);\n\n        setTodayWeather((prevState) => ({\n          ...prevState,\n          graph: todayWeather.unit === \"metric\" ? \"°C\" : \"°F\",\n          temp: parseInt(response.data.main.temp),\n        }));\n\n        checkWeather(response.data.weather[0].id);\n      })\n      .catch((error) => {\n        alert(\"City Not Found!\");\n      });\n  };\n\n  const getForecast = () => {\n    Axios.get(\n      \"https://api.openweathermap.org/data/2.5/forecast?q=\" +\n        todayWeather.location +\n        \"&units=\" +\n        todayWeather.unit +\n        \"&appid=\" +\n        APIkey\n    ).then((response) => {\n      //console.log(response.data);\n      setForecast((prevState) => ({\n        ...prevState,\n        temp: [\n          parseInt(response.data.list[8].main.temp),\n          parseInt(response.data.list[16].main.temp),\n          parseInt(response.data.list[24].main.temp),\n          parseInt(response.data.list[32].main.temp),\n        ],\n      }));\n      checkForecastWeather([\n        response.data.list[8].weather[0].id,\n        response.data.list[16].weather[0].id,\n        response.data.list[24].weather[0].id,\n        response.data.list[32].weather[0].id,\n      ]);\n    });\n  };\n\n  const checkWeather = (weatherID) => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Thunderstorm\",\n      }));\n      setBackground({ backgroundImage: \"url(/thunderstorm.jpg)\" });\n      setLogo({ backgroundImage: \"url(/thunderstormLogo.png)\" });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Rain\",\n      }));\n      setBackground({ backgroundImage: \"url(/rain.jpg)\" });\n      setLogo({ backgroundImage: \"url(/rainLogo.png)\" });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Snow\",\n      }));\n      setBackground({ backgroundImage: \"url(/snow.jpg)\" });\n      setLogo({ backgroundImage: \"url(/snowLogo.png)\" });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Mist\",\n      }));\n      setBackground({ backgroundImage: \"url(/mist.jpg)\" });\n      setLogo({ backgroundImage: \"url(/mistLogo.png)\" });\n    } else if (weatherID === 800) {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Clear\",\n      }));\n      setBackground({ backgroundImage: \"url(/clear.jpg)\" });\n      setLogo({ backgroundImage: \"url(/clearLogo.png)\" });\n    } else {\n      setTodayWeather((prevState) => ({\n        ...prevState,\n        weather: \"Clouds\",\n      }));\n      setBackground({ backgroundImage: \"url(/cloud.jpg)\" });\n      setLogo({ backgroundImage: \"url(/cloudLogo.png)\" });\n    }\n  };\n\n  function setLocation(data) {\n    setTodayWeather((prevState) => ({\n      ...prevState,\n      location: data,\n    }));\n  }\n\n  function setUnit(data) {\n    setTodayWeather((prevState) => ({\n      ...prevState,\n      unit: data,\n    }));\n  }\n\n  return showToday === true ? (\n    <div className=\"App\">\n      <Mynavbar setShowToday={setShowToday} />\n\n      <div>\n        <Today\n          background={background}\n          logo={logo}\n          todayWeather={todayWeather}\n          getWeather={getWeather}\n          getForecast={getForecast}\n          setTodayWeather={setTodayWeather}\n          setLocation={setLocation}\n          setUnit={setUnit}\n        />\n      </div>\n    </div>\n  ) : (\n    <div className=\"App\">\n      <Mynavbar setShowToday={setShowToday} />\n\n      <div>\n        <Forecast\n          todayWeather={todayWeather}\n          date={date}\n          dayList={dayList}\n          forecast={forecast}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}