{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\weathermood\\\\src\\\\Pages\\\\Today.js\",\n    _s = $RefreshSig$();\n\nimport \"../App.css\";\nimport Showinfo from \"../Components/Showinfo\";\nimport Searchbar from \"../Components/Searchbar\";\nimport React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport { Alert } from \"bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIkey = \"029ab88b8a27d39ef20a062c38c4b411\";\n\nfunction Today() {\n  _s();\n\n  const [geo, setGeo] = useState({\n    lon: 0,\n    lat: 0\n  });\n  const [location, setLocation] = useState(\"Taipei\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [temp, setTemp] = useState(0);\n  const [graph, setGraph] = useState(\"°C\");\n  const [weather, setWeather] = useState(\"Clear\");\n  const [logo, setLogo] = useState({\n    backgroundImage: \"url(/clearLogo.png)\"\n  });\n  const [background, setBackground] = useState({\n    backgroundImage: \"url(/clearSky.jpg)\"\n  });\n  useEffect(() => {\n    initialWeather();\n  }, []);\n\n  const getLocation = () => {\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(getLonandLat);else Alert(\"Geolocation is not supported!\");\n  };\n\n  function getLonandLat(position) {\n    console.log(\"lat: \" + position.coords.latitude);\n    console.log(\"lon: \" + position.coords.longitude);\n    setGeo({\n      lon: position.coords.longitude,\n      lat: position.coords.latitude\n    });\n  }\n\n  const initialWeather = () => {\n    // this will render initial page when user get in website for the first time\n    getLocation();\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + geo.lat + \"&lon=\" + geo.lon + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n      setTemp(response.data.main.temp);\n      setLocation(response.data.name);\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const getWeather = () => {\n    //console.log(\"int today.getWeather: \" + unit);\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\" + location + \"&units=\" + unit + \"&appid=\" + APIkey).then(response => {\n      //console.log(response.data);\n      //console.log(response.data.weather[0].main);\n      setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\n      setTemp(response.data.main.temp);\n      checkWeather(response.data.weather[0].id);\n    }).catch(error => {\n      alert(\"City Not Found!\");\n    });\n  };\n\n  const checkWeather = weatherID => {\n    if (weatherID >= 200 && weatherID < 300) {\n      setWeather(\"Thunderstorm\");\n      setBackground({\n        backgroundImage: \"url(/thunderstorm.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/thunderstormLogo.png)\"\n      });\n    } else if (weatherID >= 300 && weatherID < 600) {\n      setWeather(\"Rain\");\n      setBackground({\n        backgroundImage: \"url(/rain.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/rainLogo.png)\"\n      });\n    } else if (weatherID >= 600 && weatherID < 700) {\n      setWeather(\"Snow\");\n      setBackground({\n        backgroundImage: \"url(/snow.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/snowLogo.png)\"\n      });\n    } else if (weatherID >= 700 && weatherID < 800) {\n      setWeather(\"Mist\");\n      setBackground({\n        backgroundImage: \"url(/mist.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/mistLogo.png)\"\n      });\n    } else {\n      setWeather(\"Clear\");\n      setBackground({\n        backgroundImage: \"url(/clearSky.jpg)\"\n      });\n      setLogo({\n        backgroundImage: \"url(/clearLogo.png)\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: background,\n    className: \"today\",\n    children: [/*#__PURE__*/_jsxDEV(Showinfo, {\n      weather: weather,\n      temp: temp,\n      logo: logo,\n      unit: unit,\n      graph: graph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Searchbar, {\n      location: location,\n      setLocation: setLocation,\n      unit: unit,\n      setUnit: setUnit,\n      getWeather: getWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Today, \"ogNfb5J1dOYaABNQVfNf1i83QkU=\");\n\n_c = Today;\nexport default Today;\n\nvar _c;\n\n$RefreshReg$(_c, \"Today\");","map":{"version":3,"sources":["C:/Users/User/Desktop/weathermood/src/Pages/Today.js"],"names":["Showinfo","Searchbar","React","useEffect","useState","Axios","Alert","APIkey","Today","geo","setGeo","lon","lat","location","setLocation","unit","setUnit","temp","setTemp","graph","setGraph","weather","setWeather","logo","setLogo","backgroundImage","background","setBackground","initialWeather","getLocation","navigator","geolocation","getCurrentPosition","getLonandLat","position","console","log","coords","latitude","longitude","get","then","response","data","main","name","checkWeather","id","catch","error","alert","getWeather","weatherID"],"mappings":"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","sourcesContent":["import \"../App.css\";\r\nimport Showinfo from \"../Components/Showinfo\";\r\nimport Searchbar from \"../Components/Searchbar\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { Alert } from \"bootstrap\";\r\n\r\nconst APIkey = \"029ab88b8a27d39ef20a062c38c4b411\";\r\n\r\nfunction Today() {\r\n  const [geo, setGeo] = useState({ lon: 0, lat: 0 });\r\n  const [location, setLocation] = useState(\"Taipei\");\r\n  const [unit, setUnit] = useState(\"metric\");\r\n  const [temp, setTemp] = useState(0);\r\n  const [graph, setGraph] = useState(\"°C\");\r\n  const [weather, setWeather] = useState(\"Clear\");\r\n  const [logo, setLogo] = useState({ backgroundImage: \"url(/clearLogo.png)\" });\r\n  const [background, setBackground] = useState({\r\n    backgroundImage: \"url(/clearSky.jpg)\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    initialWeather();\r\n  }, []);\r\n\r\n  const getLocation = () => {\r\n    if (navigator.geolocation)\r\n      navigator.geolocation.getCurrentPosition(getLonandLat);\r\n    else Alert(\"Geolocation is not supported!\");\r\n  };\r\n\r\n  function getLonandLat(position) {\r\n    console.log(\"lat: \" + position.coords.latitude);\r\n    console.log(\"lon: \" + position.coords.longitude);\r\n    setGeo({ lon: position.coords.longitude, lat: position.coords.latitude });\r\n  }\r\n\r\n  const initialWeather = () => {\r\n    // this will render initial page when user get in website for the first time\r\n    getLocation();\r\n    Axios.get(\r\n      \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\r\n        geo.lat +\r\n        \"&lon=\" +\r\n        geo.lon +\r\n        \"&appid=\" +\r\n        APIkey\r\n    )\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        //console.log(response.data.weather[0].main);\r\n        setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\r\n        setTemp(response.data.main.temp);\r\n        setLocation(response.data.name);\r\n        checkWeather(response.data.weather[0].id);\r\n      })\r\n      .catch((error) => {\r\n        alert(\"City Not Found!\");\r\n      });\r\n  };\r\n\r\n  const getWeather = () => {\r\n    //console.log(\"int today.getWeather: \" + unit);\r\n    Axios.get(\r\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n        location +\r\n        \"&units=\" +\r\n        unit +\r\n        \"&appid=\" +\r\n        APIkey\r\n    )\r\n      .then((response) => {\r\n        //console.log(response.data);\r\n        //console.log(response.data.weather[0].main);\r\n        setGraph(unit === \"metric\" ? \"°C\" : \"°F\");\r\n        setTemp(response.data.main.temp);\r\n        checkWeather(response.data.weather[0].id);\r\n      })\r\n      .catch((error) => {\r\n        alert(\"City Not Found!\");\r\n      });\r\n  };\r\n\r\n  const checkWeather = (weatherID) => {\r\n    if (weatherID >= 200 && weatherID < 300) {\r\n      setWeather(\"Thunderstorm\");\r\n      setBackground({ backgroundImage: \"url(/thunderstorm.jpg)\" });\r\n      setLogo({ backgroundImage: \"url(/thunderstormLogo.png)\" });\r\n    } else if (weatherID >= 300 && weatherID < 600) {\r\n      setWeather(\"Rain\");\r\n      setBackground({ backgroundImage: \"url(/rain.jpg)\" });\r\n      setLogo({ backgroundImage: \"url(/rainLogo.png)\" });\r\n    } else if (weatherID >= 600 && weatherID < 700) {\r\n      setWeather(\"Snow\");\r\n      setBackground({ backgroundImage: \"url(/snow.jpg)\" });\r\n      setLogo({ backgroundImage: \"url(/snowLogo.png)\" });\r\n    } else if (weatherID >= 700 && weatherID < 800) {\r\n      setWeather(\"Mist\");\r\n      setBackground({ backgroundImage: \"url(/mist.jpg)\" });\r\n      setLogo({ backgroundImage: \"url(/mistLogo.png)\" });\r\n    } else {\r\n      setWeather(\"Clear\");\r\n      setBackground({ backgroundImage: \"url(/clearSky.jpg)\" });\r\n      setLogo({ backgroundImage: \"url(/clearLogo.png)\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={background} className=\"today\">\r\n      <Showinfo\r\n        weather={weather}\r\n        temp={temp}\r\n        logo={logo}\r\n        unit={unit}\r\n        graph={graph}\r\n      />\r\n      <Searchbar\r\n        location={location}\r\n        setLocation={setLocation}\r\n        unit={unit}\r\n        setUnit={setUnit}\r\n        getWeather={getWeather}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Today;\r\n"]},"metadata":{},"sourceType":"module"}